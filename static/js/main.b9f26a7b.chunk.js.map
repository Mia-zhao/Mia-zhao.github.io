{"version":3,"sources":["App.js","Components/PinMarker.js","Components/MapView.js","Home.js","serviceWorker.js","index.js","img/earth_white.svg","img/marker.svg"],"names":["App","className","id","Navbar","sticky","collapseOnSelect","expand","bg","variant","Brand","href","src","earth_white","alt","Toggle","aria-controls","Collapse","Nav","Link","this","props","children","Date","getFullYear","React","Component","PinMarker","state","selectedPin","longitude","trip","coordinates","latitude","location","message","impression","key","index","offsetLeft","offsetTop","Icon","width","height","onClick","e","setState","onClose","defaultCoordinates","MapView","viewport","zoom","mapRef","createRef","handleViewportChange","handleGeocoderViewportChange","transitionDuration","navStyle","position","top","left","padding","ref","onViewportChange","mapStyle","process","mapboxApiAccessToken","style","data","map","Home","Boolean","window","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.b9f26a7b.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport earth_white from './img/earth_white.svg';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"App-message\"><span>Hello there</span></div>\n        <Navbar sticky=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"/\"><img src={earth_white} className=\"App-logo\" alt=\"home\"/></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\" />\n            <Nav className=\"nav-item\">\n              <Nav.Link href=\"/\">About</Nav.Link>\n              <Nav.Link href=\"//Mia-zhao.gitee.io/blog\">Blog</Nav.Link>\n              <Nav.Link href=\"//Mia-zhao.gitee.io/resume\">Resume</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        { this.props.children }\n        <footer className=\"Content-copyright\">Copyright Â© {(new Date().getFullYear())} miazhao.net. All Rights Reserved.</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Marker, Popup } from 'react-map-gl';\n\nimport './PinMarker.css';\n\nimport Icon from './../img/marker.svg';\n\n// in pixels\nconst IconWidth = 60;\nconst IconHeight = 30;\n\nclass PinMarker extends Component {\n  state = {\n    selectedPin: null\n  }\n\n  render() {\n    const longitude = this.props.trip.coordinates[1];\n    const latitude = this.props.trip.coordinates[0];\n    const location = this.props.trip.location;\n    const message = this.props.trip.impression;\n    return(\n      <div>\n        <Marker key={ `marker-${this.props.index}` }\n          longitude={ longitude } latitude={ latitude }\n          offsetLeft={ - IconWidth / 2 } offsetTop={ - IconHeight } >\n          <img className=\"pin-marker\" src={ Icon } alt=\"marker-icon\"\n            width={ `${IconWidth}px` } height={ `${IconHeight}` }\n            onClick={ e => {\n              this.setState({ selectedPin: { longitude: longitude, latitude: latitude } });\n            }} />\n        </Marker>\n          { this.state.selectedPin && (\n            <Popup latitude={ this.state.selectedPin.latitude } longitude={ this.state.selectedPin.longitude }\n              onClose={() => { this.setState({ selectedPin: null }); }} >\n              <div>\n                <h5>{ location }</h5>\n                <div>{ message }</div>\n              </div>\n            </Popup>\n          ) }\n       </div>\n      );\n  }\n};\n\nexport default PinMarker;","import React, { Component } from 'react';\nimport ReactMapGL, { NavigationControl } from 'react-map-gl';\nimport PinMarker from './PinMarker';\nimport Geocoder from 'react-map-gl-geocoder';\n\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css'\nimport './MapView.css';\n\nimport * as data from './../data/trips.json';\n\nconst defaultCoordinates = [\n  39.9042,\n  116.4074\n];\n\nclass MapView extends Component {\n  state = {\n    viewport: {\n      latitude: defaultCoordinates[0],\n      longitude: defaultCoordinates[1],\n      zoom: 4\n    }\n  };\n  mapRef = React.createRef();\n\n  handleViewportChange = (viewport) => {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    })\n  };\n\n  handleGeocoderViewportChange = (viewport) => {\n    const geocoderDefaultOverrides = { transitionDuration: 1000 };\n\n    return this.handleViewportChange({\n      ...viewport,\n      ...geocoderDefaultOverrides\n    });\n  };\n\n  navStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '10px'\n  };\n\n  render() {\n    return (\n      <div className=\"map-wrapper\">\n        <ReactMapGL \n          ref={ this.mapRef }\n          { ...this.state.viewport } width=\"auto\" height=\"60vh\"\n          onViewportChange={ this.handleViewportChange }\n          mapStyle={ process.env.REACT_APP_MAPBOX_STYLE }\n          mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN } >\n            <div className=\"nav\" style={ this.navStyle } >\n              <NavigationControl/>\n              <Geocoder\n                mapRef={ this.mapRef }\n                onViewportChange={ this.handleGeocoderViewportChange }\n                mapboxApiAccessToken={ process.env.REACT_APP_MAPBOX_TOKEN }\n                position=\"top-right\"\n              />\n            </div>\n            { data.trips.map((trip, index) => {\n              return <PinMarker key={ index } trip = { trip } />\n            }) }\n        </ReactMapGL>\n      </div>\n    );\n  };\n};\n\nexport default MapView;","import React from 'react';\nimport App from './App';\nimport MapView from './Components/MapView';\n\nfunction Home() {\n    return (\n      <App>\n        <div className=\"Content\">\n          <h1><span>Bio</span></h1>\n          <div className=\"Content-bio\">\n          <p>Mia Zhao wants to live in a world free of viruses.</p>\n\n          <p>As a software developer/self-driven interaction designer, she's been working on brainstorming/crossing off ideas and realizing interesting ones.</p>\n\n          <p>When she's not working or studying, you can find her letting her mind wander, watching movies, playing tennis or hanging out with friends.</p>\n\n          </div>\n          <h1><span>My Trips</span></h1>\n          <MapView />\n        </div>\n      </App>\n    );\n};\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport './index.css';\n\nimport Home from './Home';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/About\" component={Home} />\n   </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/earth_white.1852636e.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker.e7eb3a8e.svg\";"],"sourceRoot":""}